// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WNBOT;

#nullable disable

namespace WNBOT.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20230629115834_fixedSeller")]
    partial class fixedSeller
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.5");

            modelBuilder.Entity("WNBOT.Classes.DO.Category.CategoryData", b =>
                {
                    b.Property<int>("categoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("categoryName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("sellerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("categoryId");

                    b.HasIndex("sellerId");

                    b.ToTable("categories", (string)null);
                });

            modelBuilder.Entity("WNBOT.Classes.DO.SavedStream.SavedStreamData", b =>
                {
                    b.Property<int>("savedStreamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("sellerId")
                        .HasColumnType("INTEGER");

                    b.Property<float>("startTime")
                        .HasColumnType("REAL");

                    b.Property<string>("streamKey")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("viewers")
                        .HasColumnType("INTEGER");

                    b.HasKey("savedStreamId");

                    b.HasIndex("sellerId");

                    b.ToTable("saved_streams", (string)null);
                });

            modelBuilder.Entity("WNBOT.Classes.DO.Seller.SellerData", b =>
                {
                    b.Property<int>("sellerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<float?>("avgPriceOfItemsSoldDuringSavedStreams")
                        .HasColumnType("REAL");

                    b.Property<int?>("avgTotalViewers")
                        .HasColumnType("INTEGER");

                    b.Property<string>("bio")
                        .HasColumnType("TEXT");

                    b.Property<float?>("dateOfOldestStream")
                        .HasColumnType("REAL");

                    b.Property<int?>("followerCount")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("itemsSoldDuringSavedStreams")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("numOfReviews")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("numOfSavedStreams")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("numOfUniquePurchasers")
                        .HasColumnType("INTEGER");

                    b.Property<float?>("sellerRating")
                        .HasColumnType("REAL");

                    b.Property<int?>("soldCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("userId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("sellerId");

                    b.ToTable("seller", (string)null);
                });

            modelBuilder.Entity("WNBOT.Classes.DO.SoldItem.SoldItemData", b =>
                {
                    b.Property<int>("soldItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("currency")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("orderId")
                        .HasColumnType("INTEGER");

                    b.Property<float>("price")
                        .HasColumnType("REAL");

                    b.Property<string>("productName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("purchaserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("quantitySold")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("savedLiveStreamsavedStreamId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("savedStreamId")
                        .HasColumnType("INTEGER");

                    b.Property<float>("timeStamp")
                        .HasColumnType("REAL");

                    b.Property<string>("transactionType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("soldItemId");

                    b.HasIndex("savedLiveStreamsavedStreamId");

                    b.ToTable("sold_item", (string)null);
                });

            modelBuilder.Entity("WNBOT.Classes.DO.Category.CategoryData", b =>
                {
                    b.HasOne("WNBOT.Classes.DO.Seller.SellerData", "seller")
                        .WithMany("categories")
                        .HasForeignKey("sellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("seller");
                });

            modelBuilder.Entity("WNBOT.Classes.DO.SavedStream.SavedStreamData", b =>
                {
                    b.HasOne("WNBOT.Classes.DO.Seller.SellerData", "seller")
                        .WithMany("savedLiveStreams")
                        .HasForeignKey("sellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("seller");
                });

            modelBuilder.Entity("WNBOT.Classes.DO.SoldItem.SoldItemData", b =>
                {
                    b.HasOne("WNBOT.Classes.DO.SavedStream.SavedStreamData", "savedLiveStream")
                        .WithMany("soldItems")
                        .HasForeignKey("savedLiveStreamsavedStreamId");

                    b.Navigation("savedLiveStream");
                });

            modelBuilder.Entity("WNBOT.Classes.DO.SavedStream.SavedStreamData", b =>
                {
                    b.Navigation("soldItems");
                });

            modelBuilder.Entity("WNBOT.Classes.DO.Seller.SellerData", b =>
                {
                    b.Navigation("categories");

                    b.Navigation("savedLiveStreams");
                });
#pragma warning restore 612, 618
        }
    }
}
